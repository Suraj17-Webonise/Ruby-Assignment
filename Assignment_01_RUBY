#Q1) Compute the sum of cubes for a given range a through b. Write a method called sum_of_cubes to accomplish this task. Example Given range 1 to 3 the method should return 36.
def sum_of_cubes(a,b)
i=a
sum=0
while i<=b
sum=sum+(i*i*i)
i+=1
end
sum
end
puts sum_of_cubes(1,3)

#Q2) Given an Array, return the elements that are present exactly once in the array. You need to write a method called non_duplicated_values to accomplish this task. Example: Given [1,2,2,3,3,4,5], the method should return [1,4,5].
def non_duplicated_values(array)
array.find_all{|x| array.count(x)==1}
end
puts non_duplicated_values([1,2,2,3,3,4,5])

#Q3) Given a sentence, return true if the sentence is a palindrome. You are supposed to write a method palindrome? to accomplish this task.
Note Ignore whitespace and cases of characters. Example: Given ""Never odd or even"" the method should return true.
def palindrome_or_not(string)
string=string.delete(' ').upcase
return string.eql?string.reverse
end
puts palindrome_or_not("Never odd or even")

#Q4) 9 is a Kaprekar number since 9 ^ 2 = 81 and 8 + 1 = 9, 297 is also Kaprekar number since 297 ^ 2 = 88209 and 88 + 209 = 297. In short, for a Kaprekar number k with n-digits, if you square it and add the right n digits to the left n or n-1 digits, the resultant sum is k. Find if a given number is a Kaprekar number.
def kaprekar_num?(k)
square =k**2
digits = k.to_s.length
right_n_digits = square.to_s[(0-digits)..-1].to_i
left_digits= square.to_s[0..(1-digits)].to_i
sum =left_digits +right_n_digits

if sum==k
puts "#{k} : is a Kaprekar number"
else
puts "#{k} : is not Kaprekar Number"
end
end
check= kaprekar_num?(9)
puts check

#Q5) Find occurrence of RUBY from string 1.
String1="RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."
puts String1.scan("RUBY").length

#Q6) Find the position where RUBY occurs in the string 1.
String1="RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."
puts String1.index("RUBY")

#Q7) Create array of words in string 1 & print them using a recursive function.
String1="RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."
puts String1.split(' ')

#Q8) Capitalise string 1
String1="RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."
puts String1.capitalize

#Q9) Combine string 1 & 2.
String1="RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."
String2="RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used."
puts String1+String2

#Q10) Print current date.
require 'date'
puts date=Date.today

#Q11) print 12th Jan 2012
puts Time.new(2012, 1, 12)


#Q12) add 7 days in current date
require 'date'
puts date=Date.today+7

#Q13) Cut the string 1 into 4 parts & print it.
String1="RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."
puts String1.split(" ",4)

#Q14) Divide the string 1 by occurrences of '.'. Combine the array in reverse word sequence.
String1="RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."
puts String1(".").reverse

#Q15) Remove the HTML characters from string.
String1="RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."
puts String1.gsub(/<\/?[^>]*>/,"")

#Q16) Print the 'RUBY' word from string 1 by traversing it using string functions
String1="RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."
String1.scan(/[\w']+/) do |word|
if word.eql?"RUBY"
puts word
end
end

#Q17) Find the length of string 1 & 2.
String1="RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."
String2="RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used."
puts String1.length
puts String2.length

#Q18) Compare two dates. (12-04-2010 & 12-05-2011). Calculate the days between these two dates.
puts (Time.mktime(2011,05,12)-Time.mktime(2010,04,12)).to_i / (24*60*60)

#Q19) Print date after 20 days from current date
require 'date'
puts date=Date.today+20

#Q20) Print date in array format.
puts Time.now.to_a

#Q21) Print prime numbers from the given array.
require 'prime'
def str_traverse(arr)
count=0
i=2
for num in arr
if Prime.prime?(num)
puts "#{num} is a prime number"
else
puts "#{num} is not a prime number"
end
end
end
str_traverse([2,6,3,8,4,9,1])

#22) Write a program for fuel indication.
#Ex: 0 -> Out of fuel, 1-10 -> Low, Please fill, 11-30 -> Good for now, 31-50 -> Almost Full, > 50 -> Full.
input =24
case input
when 0
puts "Out of fuel"
when (1..10)
puts "Low, Please fill"
when (11..30)
puts "Good for now"
when (31..50)
puts "Almost Full"
when 50
puts "Full"
end

#Q23) Swap the given values(without the third variable)
def swapNum(a,b)
a,b=b,a
return a,b
end
swapNum(3,6)

#Q24) Program to Randomly Select an Element From the Array.
arr=[5,2,7,4].sample
puts arr

#Q25) Program to Count the Number of Each Vowel.
def count_vowels(string)
string.count('aeiou')
end
puts count_vowels("asdfghjklqwertyuiopasdfghjklzxcvbnm")

#Q26) Program to Sort a Hash by Value.
hash={"amazon"=>67, "flipkart"=>13, "myntra"=>93, "lenskart"=>1}
hash.sort_by{|_key,value| value}

#Q27) Program to Convert Two Arrays Into a Hash.
def combine_array_into_hash()
key = ["Seeta", "Geeta"]
value=["1", "2"]
puts Hash[key.zip(value)]
end
puts combine_array_into_hash()




